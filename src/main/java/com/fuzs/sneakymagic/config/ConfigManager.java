package com.fuzs.sneakymagic.config;

import com.fuzs.sneakymagic.SneakyMagic;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.config.ModConfig;

import java.io.File;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Function;

@SuppressWarnings("unused")
public class ConfigManager {

    private static final Set<ConfigEntry<? extends ForgeConfigSpec.ConfigValue<?>, ?>> CONFIG_ENTRIES = Sets.newHashSet();
    private static final Map<Runnable, ConfigEventType> CONFIG_LISTENERS = Maps.newHashMap();

    /**
     * this is a utility class
     */
    private ConfigManager() {

    }

    // fires on both "loading" and "reloading", "loading" phase is required for initial setup
    public static void onModConfig(final ModConfig.ModConfigEvent evt) {

        if (Builder.spec == null || !Builder.spec.isLoaded()) {

            SneakyMagic.LOGGER.error("Unable to get values from config: " + "Config spec not loaded");
        } else {

            // no need to check modid or anything as this is only fired for the mod
            syncType(evt.getConfig().getType());
            notifyListeners(ConfigEventType.getType(evt));
        }
    }

    /**
     * sync all config entries no matter which type
     */
    public static void sync() {

        CONFIG_ENTRIES.forEach(ConfigEntry::sync);
    }

    /**
     * sync config entries for specific type of config
     * @param type type of config to sync
     */
    public static void syncType(ModConfig.Type type) {

        CONFIG_ENTRIES.stream().filter(configValue -> configValue.getType() == type).forEach(ConfigEntry::sync);
    }

    /**
     * register config entry on both client and server
     * @param entry source config value object
     * @param action action to perform when value changes (is reloaded)
     * @param <S> config value of a certain type
     * @param <T> type for value
     */
    public static <S extends ForgeConfigSpec.ConfigValue<T>, T> void registerEntry(Function<ForgeConfigSpec.Builder, S> entry, Consumer<T> action) {

        registerEntry(ModConfig.Type.COMMON, entry, action);
    }

    /**
     * register config entry on the client
     * @param entry source config value object
     * @param action action to perform when value changes (is reloaded)
     * @param <S> config value of a certain type
     * @param <T> type for value
     */
    public static <S extends ForgeConfigSpec.ConfigValue<T>, T> void registerClientEntry(Function<ForgeConfigSpec.Builder, S> entry, Consumer<T> action) {

        registerEntry(ModConfig.Type.CLIENT, entry, action);
    }

    /**
     * register config entry on the server
     * @param entry source config value object
     * @param action action to perform when value changes (is reloaded)
     * @param <S> config value of a certain type
     * @param <T> type for value
     */
    public static <S extends ForgeConfigSpec.ConfigValue<T>, T> void registerServerEntry(Function<ForgeConfigSpec.Builder, S> entry, Consumer<T> action) {

        registerEntry(ModConfig.Type.SERVER, entry, action);
    }

    /**
     * register config entry
     * @param <S> config value of a certain type
     * @param <T> type for value
     * @param type type of config to register for
     * @param entry source config value object
     * @param action action to perform when value changes (is reloaded)
     */
    private static <S extends ForgeConfigSpec.ConfigValue<T>, T> void registerEntry(ModConfig.Type type, Function<ForgeConfigSpec.Builder, S> entry, Consumer<T> action) {

        if (Builder.spec == null) {

            CONFIG_ENTRIES.add(new ConfigEntry<>(type, entry.apply(Builder.BUILDER), action));
        } else {

            SneakyMagic.LOGGER.error("Unable to register config entry: " + "Config spec already built");
        }
    }

    public static void addListener(Runnable listener) {

        addListener(listener, ConfigEventType.BOTH);
    }

    public static void addLoadingListener(Runnable listener) {

        addListener(listener, ConfigEventType.LOADING);
    }

    public static void addReloadingListener(Runnable listener) {

        addListener(listener, ConfigEventType.RELOADING);
    }

    private static void addListener(Runnable listener, ConfigEventType type) {

        CONFIG_LISTENERS.merge(listener, type, (type1, type2) -> type1 != type2 ? ConfigEventType.BOTH : type1);
    }

    private static void notifyListeners(ConfigEventType type) {

        CONFIG_LISTENERS.entrySet().stream().filter(entry -> entry.getValue().matches(type)).map(Map.Entry::getKey).forEach(Runnable::run);
    }

    /**
     * @param type type of config
     * @param modId modid this config belongs to
     * @return config name as if it were generated by Forge itself
     */
    public static String getConfigName(ModConfig.Type type, String modId) {

        return String.format("%s-%s.toml", modId, type.extension());
    }

    /**
     * put config into it's own folder when there are multiples
     * @param type type of config
     * @param modId modid this config belongs to
     * @return name lead by folder
     */
    public static String getConfigNameInFolder(ModConfig.Type type, String modId) {

        return modId + File.separator + getConfigName(type, modId);
    }

    private static class ConfigEntry<S extends ForgeConfigSpec.ConfigValue<T>, T> {

        final ModConfig.Type type;
        final S entry;
        final Consumer<T> action;

        ConfigEntry(ModConfig.Type type, S entry, Consumer<T> action) {

            this.type = type;
            this.entry = entry;
            this.action = action;
        }

        ModConfig.Type getType() {

            return this.type;
        }

        void sync() {

            this.action.accept(this.entry.get());
        }

    }

    public static class Builder {

        private static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
        private static ForgeConfigSpec spec;

        public static ForgeConfigSpec getSpec() {

            if (spec == null) {

                spec = BUILDER.build();
            }

            return spec;
        }

        public static void createCategory(String name, Runnable options, String... comments) {

            if (comments.length != 0) {

                BUILDER.comment(comments);
            }

            BUILDER.push(name);
            options.run();
            BUILDER.pop();
        }

    }

    private enum ConfigEventType {

        LOADING, RELOADING, BOTH;

        boolean matches(ConfigEventType type) {

            if (type == BOTH || this == BOTH) {

                return true;
            } else if (type == LOADING && this != RELOADING) {

                return true;
            }

            return type == RELOADING && this != LOADING;
        }

        static ConfigEventType getType(ModConfig.ModConfigEvent evt) {

            return evt instanceof ModConfig.Loading ? LOADING : RELOADING;
        }

    }

}
