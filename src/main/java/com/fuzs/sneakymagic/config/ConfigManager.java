package com.fuzs.sneakymagic.config;

import com.google.common.collect.Sets;
import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.config.ModConfig;

import java.io.File;
import java.util.Set;
import java.util.function.Consumer;

@SuppressWarnings("unused")
public class ConfigManager {

    private static final Set<ConfigEntry<? extends ForgeConfigSpec.ConfigValue<?>, ?>> CONFIG_ENTRIES = Sets.newHashSet();

    private ConfigManager() {

    }

    public static void onModConfig(final ModConfig.Reloading evt) {

        // no need to check modid or anything as this is only fired for the mod
        syncType(evt.getConfig().getType());
    }

    public static void sync() {

        CONFIG_ENTRIES.forEach(ConfigEntry::sync);
    }

    public static void syncType(ModConfig.Type type) {

        CONFIG_ENTRIES.stream().filter(configValue -> configValue.getType() == type).forEach(ConfigEntry::sync);
    }

    public static <S extends ForgeConfigSpec.ConfigValue<T>, T> void registerEntry(S entry, Consumer<T> action) {

        registerEntryForType(ModConfig.Type.COMMON, entry, action);
    }

    public static <S extends ForgeConfigSpec.ConfigValue<T>, T> void registerClientEntry(S entry, Consumer<T> action) {

        registerEntryForType(ModConfig.Type.CLIENT, entry, action);
    }

    public static <S extends ForgeConfigSpec.ConfigValue<T>, T> void registerServerEntry(S entry, Consumer<T> action) {

        registerEntryForType(ModConfig.Type.SERVER, entry, action);
    }

    private static <S extends ForgeConfigSpec.ConfigValue<T>, T> void registerEntryForType(ModConfig.Type type, S entry, Consumer<T> action) {

        CONFIG_ENTRIES.add(new ConfigEntry<>(type, entry, action));
    }

    /**
     * @param type type of config
     * @param modId modid this config belongs to
     * @return config name as if it were generated by Forge itself
     */
    public static String getConfigName(ModConfig.Type type, String modId) {

        return String.format("%s-%s.toml", modId, type.extension());
    }

    /**
     * put config into it's own folder when there are multiples
     * @param type type of config
     * @param modId modid this config belongs to
     * @return name lead by folder
     */
    public static String getConfigNameInFolder(ModConfig.Type type, String modId) {

        return modId + File.separator + getConfigName(type, modId);
    }

    private static class ConfigEntry<S extends ForgeConfigSpec.ConfigValue<T>, T> {

        final ModConfig.Type type;
        final S entry;
        final Consumer<T> action;

        ConfigEntry(ModConfig.Type type, S entry, Consumer<T> action) {

            this.type = type;
            this.entry = entry;
            this.action = action;
        }

        ModConfig.Type getType() {

            return this.type;
        }

        void sync() {

            this.action.accept(this.entry.get());
        }

    }

}
